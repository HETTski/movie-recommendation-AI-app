{"ast":null,"code":"var _jsxFileName = \"/home/hubert/movie-recommendation-AI-app/frontend/movie-recommendation-chat/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Message from './Message';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  // Function to send messages\n  const handleSend = async () => {\n    if (input.trim() === '') return;\n    const userMessage = {\n      message: input,\n      isUser: true\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    try {\n      const response = await axios.post('http://localhost:5000/chat', {\n        message: input,\n        // User message\n        show_now_playing: false // Set to true if you want to show now playing movies\n      });\n      const botMessage = {\n        message: response.data.gpt_response,\n        // Response from GPT\n        isUser: false\n      };\n      const movieMessages = response.data.movie_recommendations.map((recommendation, index) => ({\n        message: `${recommendation.title}\\n${recommendation.movies.map(movie => `${movie.title}: ${movie.overview}`).join(\"\\n\")}`,\n        isUser: false\n      }));\n      setMessages(prevMessages => [...prevMessages, userMessage, botMessage, ...movieMessages]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n    setInput(''); // Clear input field\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        message: msg.message,\n        isUser: msg.isUser\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"HDAtGPGcvWga1zf1TBXg51T+tsc=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","axios","Message","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","input","setInput","handleSend","trim","userMessage","message","isUser","prevMessages","response","post","show_now_playing","botMessage","data","gpt_response","movieMessages","movie_recommendations","map","recommendation","index","title","movies","movie","overview","join","error","console","className","children","msg","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/hubert/movie-recommendation-AI-app/frontend/movie-recommendation-chat/src/components/Chat.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport Message from './Message';\nimport './Chat.css';\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  // Function to send messages\n  const handleSend = async () => {\n    if (input.trim() === '') return;\n\n    const userMessage = { message: input, isUser: true };\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n    try {\n      const response = await axios.post('http://localhost:5000/chat', {\n        message: input, // User message\n        show_now_playing: false, // Set to true if you want to show now playing movies\n      });\n\n      const botMessage = {\n        message: response.data.gpt_response, // Response from GPT\n        isUser: false\n      };\n\n      const movieMessages = response.data.movie_recommendations.map((recommendation, index) => ({\n        message: `${recommendation.title}\\n${recommendation.movies.map(movie => `${movie.title}: ${movie.overview}`).join(\"\\n\")}`,\n        isUser: false\n      }));\n\n      setMessages((prevMessages) => [...prevMessages, userMessage, botMessage, ...movieMessages]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n\n    setInput(''); // Clear input field\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"messages\">\n        {messages.map((msg, index) => (\n          <Message key={index} message={msg.message} isUser={msg.isUser} />\n        ))}\n      </div>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type your message...\"\n        />\n        <button onClick={handleSend}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}