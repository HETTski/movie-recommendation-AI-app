{"ast":null,"code":"var _jsxFileName = \"/home/hubert/movie-recommendation-AI-app/frontend/movie-recommendation-chat/src/components/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Message from './Message';\nimport './Chat.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  // Funkcja obsługująca wysyłanie wiadomości\n  const handleSend = async () => {\n    if (input.trim() === '') return; // Jeśli pole wejściowe jest puste, nie wysyłaj\n\n    const userMessage = {\n      message: input,\n      isUser: true\n    }; // Ustaw wiadomość użytkownika\n    setMessages(prevMessages => [...prevMessages, userMessage]); // Dodaj wiadomość użytkownika do stanu\n\n    try {\n      // Wysłanie zapytania do API (Flask)\n      const response = await axios.post('http://localhost:5000/chat', {\n        message: input,\n        // Przesyłamy wiadomość użytkownika\n        show_now_playing: false // Możesz zmienić na true, jeśli chcesz, by API zwracało \"now playing\" filmy\n      });\n      const botMessage = {\n        message: response.data.reply,\n        isUser: false\n      }; // Odpowiedź od API\n      setMessages(prevMessages => [...prevMessages, userMessage, botMessage]); // Dodaj wiadomość bota do stanu\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n    setInput(''); // Wyczyść pole wejściowe po wysłaniu wiadomości\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n        message: msg.message,\n        isUser: msg.isUser\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value) // Zaktualizuj stan wejściowy\n        ,\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"HDAtGPGcvWga1zf1TBXg51T+tsc=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","axios","Message","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","input","setInput","handleSend","trim","userMessage","message","isUser","prevMessages","response","post","show_now_playing","botMessage","data","reply","error","console","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/hubert/movie-recommendation-AI-app/frontend/movie-recommendation-chat/src/components/Chat.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport Message from './Message';\nimport './Chat.css';\n\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  // Funkcja obsługująca wysyłanie wiadomości\n  const handleSend = async () => {\n    if (input.trim() === '') return;  // Jeśli pole wejściowe jest puste, nie wysyłaj\n\n    const userMessage = { message: input, isUser: true };  // Ustaw wiadomość użytkownika\n    setMessages((prevMessages) => [...prevMessages, userMessage]);  // Dodaj wiadomość użytkownika do stanu\n\n    try {\n      // Wysłanie zapytania do API (Flask)\n      const response = await axios.post('http://localhost:5000/chat', {\n        message: input,  // Przesyłamy wiadomość użytkownika\n        show_now_playing: false,  // Możesz zmienić na true, jeśli chcesz, by API zwracało \"now playing\" filmy\n      });\n\n      const botMessage = { message: response.data.reply, isUser: false };  // Odpowiedź od API\n      setMessages((prevMessages) => [...prevMessages, userMessage, botMessage]);  // Dodaj wiadomość bota do stanu\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n\n    setInput('');  // Wyczyść pole wejściowe po wysłaniu wiadomości\n  };\n\n  return (\n    <div className=\"chat-container\">\n      <div className=\"messages\">\n        {/* Renderowanie wiadomości w oknie czatu */}\n        {messages.map((msg, index) => (\n          <Message key={index} message={msg.message} isUser={msg.isUser} />\n        ))}\n      </div>\n      <div className=\"input-container\">\n        {/* Pole wejściowe do wysyłania wiadomości */}\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}  // Zaktualizuj stan wejściowy\n          placeholder=\"Type your message...\"\n        />\n        {/* Przycisk wysyłania wiadomości */}\n        <button onClick={handleSend}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGpB,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAIF,KAAK,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,CAAE;;IAElC,MAAMC,WAAW,GAAG;MAAEC,OAAO,EAAEL,KAAK;MAAEM,MAAM,EAAE;IAAK,CAAC,CAAC,CAAE;IACvDP,WAAW,CAAEQ,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEH,WAAW,CAAC,CAAC,CAAC,CAAE;;IAEhE,IAAI;MACF;MACA,MAAMI,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAAC,4BAA4B,EAAE;QAC9DJ,OAAO,EAAEL,KAAK;QAAG;QACjBU,gBAAgB,EAAE,KAAK,CAAG;MAC5B,CAAC,CAAC;MAEF,MAAMC,UAAU,GAAG;QAAEN,OAAO,EAAEG,QAAQ,CAACI,IAAI,CAACC,KAAK;QAAEP,MAAM,EAAE;MAAM,CAAC,CAAC,CAAE;MACrEP,WAAW,CAAEQ,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEH,WAAW,EAAEO,UAAU,CAAC,CAAC,CAAC,CAAE;IAC9E,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;IAEAb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EACjB,CAAC;EAED,oBACEN,OAAA;IAAKqB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BtB,OAAA;MAAKqB,SAAS,EAAC,UAAU;MAAAC,QAAA,EAEtBnB,QAAQ,CAACoB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvBzB,OAAA,CAACF,OAAO;QAAaY,OAAO,EAAEc,GAAG,CAACd,OAAQ;QAACC,MAAM,EAAEa,GAAG,CAACb;MAAO,GAAhDc,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA6C,CACjE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN7B,OAAA;MAAKqB,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAE9BtB,OAAA;QACE8B,IAAI,EAAC,MAAM;QACXC,KAAK,EAAE1B,KAAM;QACb2B,QAAQ,EAAGC,CAAC,IAAK3B,QAAQ,CAAC2B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAAE;QAAA;QAC5CI,WAAW,EAAC;MAAsB;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eAEF7B,OAAA;QAAQoC,OAAO,EAAE7B,UAAW;QAAAe,QAAA,EAAC;MAAI;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC3B,EAAA,CAhDID,IAAI;AAAAoC,EAAA,GAAJpC,IAAI;AAkDV,eAAeA,IAAI;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}